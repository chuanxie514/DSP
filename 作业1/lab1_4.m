%要计算序列的离散时间傅立叶变换（DTFT）并绘制其幅度和相位，可以按照以下步骤进行：

%计算频率范围：

%确定采样频率 Fs，通常为采样点数的倒数。
%创建频率轴 f，以正规化频率表示（0到1之间）。
%确定频率范围（通常为 -Fs/2 到 Fs/2 之间）。
%计算DTFT：

%定义序列 X(n)。
%计算 DTFT X(f) 的离散值。根据 DTFT 公式，在给定频率值 f 下，计算 X(f) 的值。
%绘制幅度和相位图：

%计算 X(f) 的幅度和相位分量。
%绘制幅度图像，横轴为频率 f，纵轴为幅度。
%绘制相位图像，横轴为频率 f，纵轴为相位。
% 定义序列 X(n)
n = 0:7;
X = exp(-1j * 0.3 * pi * n);

% 计算频率范围
Fs = 1;
f = 0:(Fs/length(n)):(Fs-Fs/length(n));

% 计算DTFT,用循环计算序列的离散时间傅立叶变换（DTFT）。具体来说：
%Xf 初始化为与频率轴 f 大小相同的零向量。
%在每个频率点上，循环遍历频率轴 f 中的元素。
%对于每个频率值 f(i)，计算 exp(-1i * 2 * pi * f(i) * n) 的值，它是一个复数指数项的向量。
%将序列 X 与这个复数指数项向量相乘，并对结果求和。这相当于将序列 X 与复指数 
%进行内积运算。
%将这个内积的结果存储在 Xf(i) 中，以获得 DTFT 的离散值。
%整个过程将 X 与一系列复指数进行内积，从而计算出在给定频率下的 DTFT。
%这种方法是通过直接计算频率点上的离散时间傅立叶变换来实现的，而非使用快速傅立叶变换（FFT）算法，
%因此在样本数较少时效率较低。想要更高效的计算方式，
%可以直接使用 MATLAB 中的 fft 函数，它已经实现了快速傅立叶变换算法。
Xf = zeros(size(f));
for i = 1:length(f)
    Xf(i) = sum(X .* exp(-1i * 2 * pi * f(i) * n));
end

% 绘制幅度和相位图
figure;

% 幅度图
subplot(2, 1, 1);
stem(f, abs(Xf), 'filled');
title('DTFT幅度');
xlabel('f');
ylabel('|X(f)|');

% 相位图
subplot(2, 1, 2);
stem(f, angle(Xf), 'filled');
title('DTFT相位');
xlabel('f');
ylabel('\angle X(f)');
